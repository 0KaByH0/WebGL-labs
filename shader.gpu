

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 textCoords;
uniform mat4 ModelViewProjectionMatrix, normalMatrix;

uniform float fAngleRad;
uniform vec2 fUserPoint;

varying vec3 normalInterp;
varying vec3 vertPos;
varying vec2 vTextCoords;

mat4 getRotate(float angleRad) {
  float c = cos(angleRad);
  float s = sin(angleRad);

  return mat4(
    vec4(c, s, 0.0, 0.0),
    vec4(-s, c, 0.0, 0.0),
    vec4(0.0, 0.0, 1.0, 0.0),
    vec4(0.0, 0.0, 0.0, 1.0)
  );
}

mat4 getTranslate(vec2 t) {
  return mat4(
    1.0, 0.0, 0.0, 0.0,
    t.x, t.y, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0
  );
}

void main(){
  vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
  vertPos = vec3(vertPos4) / vertPos4.w;
  normalInterp = vec3(normalMatrix * vec4(normal, 0.0));

  mat4 rotateMat = getRotate(fAngleRad);
  mat4 translate = getTranslate(-fUserPoint);
  mat4 translateBack = getTranslate(fUserPoint);

  vec4 textCoordTr = vec4(textCoords, 0, 0) * translate;
  vec4 textCoordRotate = textCoordTr * rotateMat;
  vec4 textCoordTrBack = textCoordRotate * translateBack;

  vTextCoords = vec2(textCoordTrBack);

  gl_Position = vertPos4;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 normalInterp;
varying vec3 vertPos;
varying vec2 vTextCoords;

uniform float shininessVal;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 lightPos;
uniform sampler2D uTexture;

void main() {
  vec3 N = normalize(normalInterp);
  vec3 L = normalize(lightPos - vertPos);

  float lambertian = max(dot(N, L), 0.0);
  float specularL = 0.0;
  if(lambertian > 0.0) {
    vec3 R = reflect(-L, N);
    vec3 V = normalize(-vertPos);

    float specAngle = max(dot(R, V), 0.0);
    specularL = pow(specAngle, shininessVal);
  }

  vec3 ambient = ambientColor;
  vec3 diffuse = lambertian * diffuseColor;
  vec3 specular = specularL * specularColor;

  vec4 texture = texture2D(uTexture, vTextCoords);
  vec4 color1 = vec4(ambient + diffuse + specular, 1.0);

  gl_FragColor = texture * vec4(1.0, 1.0, 0.6, 1.0);
}`;