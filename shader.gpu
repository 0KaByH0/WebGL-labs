

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix, normalMatrix;

varying vec3 normalInterp;
varying vec3 vertPos;

void main(){
  vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
  vertPos = vec3(vertPos4) / vertPos4.w;
  normalInterp = vec3(normalMatrix * vec4(normal, 0.0));
  gl_Position = vertPos4;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 normalInterp;
varying vec3 vertPos;

uniform float shininessVal;
uniform vec3 ambientColor;
uniform vec3 diffuseColor;
uniform vec3 specularColor;
uniform vec3 lightPos;

void main() {
  vec3 N = normalize(normalInterp);
  vec3 L = normalize(lightPos - vertPos);

  float lambertian = max(dot(N, L), 0.0);
  float specularL = 0.0;
  if(lambertian > 0.0) {
    vec3 R = reflect(-L, N);
    vec3 V = normalize(-vertPos);

    float specAngle = max(dot(R, V), 0.0);
    specularL = pow(specAngle, shininessVal);
  }

  vec3 ambient = ambientColor;
  vec3 diffuse = lambertian * diffuseColor;
  vec3 specular = specularL * specularColor;

  gl_FragColor = vec4(ambient + diffuse + specular, 1.0);
}`;